{
	"name": "ProductsStatistics",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fromvariable",
						"type": "DatasetReference"
					},
					"name": "ProductsUnitProfit"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ResultsProductionFactory",
						"type": "DatasetReference"
					},
					"name": "sinkAVGdivision"
				},
				{
					"dataset": {
						"referenceName": "ResultsProductionFactory",
						"type": "DatasetReference"
					},
					"name": "sinkLots"
				},
				{
					"dataset": {
						"referenceName": "ResultsProductionFactory",
						"type": "DatasetReference"
					},
					"name": "sinkWicked"
				},
				{
					"dataset": {
						"referenceName": "ResultsProductionFactory",
						"type": "DatasetReference"
					},
					"name": "sinkShack"
				},
				{
					"dataset": {
						"referenceName": "ResultsProductionFactory",
						"type": "DatasetReference"
					},
					"name": "sinkTheOther"
				},
				{
					"dataset": {
						"referenceName": "ResultsProductionFactory",
						"type": "DatasetReference"
					},
					"name": "sinkSecret"
				},
				{
					"dataset": {
						"referenceName": "ResultsProductionFactory",
						"type": "DatasetReference"
					},
					"name": "sinkAVGunits"
				}
			],
			"transformations": [
				{
					"name": "avgUnits"
				},
				{
					"name": "roundValues1"
				},
				{
					"name": "avgDivisionFactory"
				},
				{
					"name": "roundValues2"
				},
				{
					"name": "factoryShack"
				},
				{
					"name": "sumUnitsWicked"
				},
				{
					"name": "sumUnitsShack"
				},
				{
					"name": "totalUnitsShack"
				},
				{
					"name": "joinShack"
				},
				{
					"name": "addJoinColumnTotalShack"
				},
				{
					"name": "addJoinColumnSumShack"
				},
				{
					"name": "percentageDivisionShack"
				},
				{
					"name": "removeColumnsPercentageShack"
				},
				{
					"name": "totalUnitWicked"
				},
				{
					"name": "addJoinColumnTotalWicked"
				},
				{
					"name": "addJoinColumnSumWicked"
				},
				{
					"name": "joinWicked"
				},
				{
					"name": "percentageDivisionWicked"
				},
				{
					"name": "removeColumnsPercentageWicked"
				},
				{
					"name": "sumUnitsTheOther"
				},
				{
					"name": "totalUnitsTheOther"
				},
				{
					"name": "totalUnitsSecret"
				},
				{
					"name": "sumUnitsSecrets"
				},
				{
					"name": "addJoinColumnTotalTheOther"
				},
				{
					"name": "addJoinColumnSumTheOther"
				},
				{
					"name": "addJoinColumnTotalSecret"
				},
				{
					"name": "addJoinColumnSumSecret"
				},
				{
					"name": "joinTheOther"
				},
				{
					"name": "joinSecret"
				},
				{
					"name": "percentageDivisionTheOther"
				},
				{
					"name": "percentageDivisionSecret"
				},
				{
					"name": "removeColumnsPercentageSecret"
				},
				{
					"name": "removeColumnsPercentageTheOther"
				},
				{
					"name": "totalUnitLots"
				},
				{
					"name": "addJoinColumnTotalLots"
				},
				{
					"name": "sumUnitsLots"
				},
				{
					"name": "addJoinColumnSumLots"
				},
				{
					"name": "joinLots"
				},
				{
					"name": "percentageDivisionLots"
				},
				{
					"name": "removeColumnsPercentageLots"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Division as string,",
				"          {Product Name} as string,",
				"          Factory as string,",
				"          {Product ID} as string,",
				"          {Unit Price} as string,",
				"          {Unit Cost} as string,",
				"          {Unit Profit} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProductsUnitProfit",
				"ProductsUnitProfit aggregate(groupBy(Division),",
				"     AVG_Unit_Price = avg(toFloat({Unit Price})),",
				"          AVG_Unit_Cost = avg(toFloat({Unit Cost})),",
				"          AVG_Unit_Profit = avg(toFloat({Unit Profit}))) ~> avgUnits",
				"avgUnits derive(AVG_Unit_Price = round({AVG_Unit_Price},2),",
				"          AVG_Unit_Cost = round({AVG_Unit_Cost},2),",
				"          AVG_Unit_Profit = round({AVG_Unit_Profit},2)) ~> roundValues1",
				"ProductsUnitProfit aggregate(groupBy(Division,",
				"          Factory),",
				"     AVG_Unit_Price = avg(toFloat({Unit Price})),",
				"          AVG_Unit_Cost = avg(toFloat({Unit Cost})),",
				"          AVG_Unit_Profit = avg(toFloat({Unit Profit}))) ~> avgDivisionFactory",
				"avgDivisionFactory derive(AVG_Unit_Price = round(AVG_Unit_Price,2),",
				"          AVG_Unit_Cost = round(AVG_Unit_Cost,2),",
				"          AVG_Unit_Profit = round(AVG_Unit_Profit,2)) ~> roundValues2",
				"ProductsUnitProfit split(Factory == \"Lot's O' Nuts\",",
				"     Factory == \"Wicked Choccy's\",",
				"     Factory == \"Sugar Shack\",",
				"     Factory == \"The Other Factory\",",
				"     Factory == \"Secret Factory\",",
				"     disjoint: false) ~> factoryShack@(factoryLots, factoryWicked, factoryShack, factoryTheOther, factorySecret)",
				"factoryShack@factoryWicked aggregate(groupBy(Division),",
				"     sumUnitPrice = sum(toFloat({Unit Price})),",
				"          sumUnitCost = sum(toFloat({Unit Cost})),",
				"          sumUnitProfit = sum(toFloat({Unit Profit}))) ~> sumUnitsWicked",
				"factoryShack@factoryShack aggregate(groupBy(Division),",
				"     sumUnitPrice = sum(toFloat({Unit Price})),",
				"          sumUnitCost = sum(toFloat({Unit Cost})),",
				"          sumUnitProfit = sum(toFloat({Unit Profit}))) ~> sumUnitsShack",
				"factoryShack@factoryShack aggregate(totalSumUnitPrice = sum(toFloat({Unit Price})),",
				"          totalSumUnitCost = sum(toFloat({Unit Cost})),",
				"          totalSumUnitProfit = sum(toFloat({Unit Profit}))) ~> totalUnitsShack",
				"addJoinColumnSumShack, addJoinColumnTotalShack join(JoinKeySum == JoinKeyTotal,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinShack",
				"totalUnitsShack derive(JoinKeyTotal = 1) ~> addJoinColumnTotalShack",
				"sumUnitsShack derive(JoinKeySum = 1) ~> addJoinColumnSumShack",
				"joinShack derive(percentageUnitPrice = round(((sumUnitPrice / totalSumUnitPrice) * 100),2),",
				"          percentageUnitCost = round(((sumUnitCost / totalSumUnitCost) * 100),2),",
				"          percentageUnitProfit = round(((sumUnitProfit / totalSumUnitProfit) * 100),2)) ~> percentageDivisionShack",
				"percentageDivisionShack select(mapColumn(",
				"          Division,",
				"          percentageUnitPrice,",
				"          percentageUnitCost,",
				"          percentageUnitProfit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeColumnsPercentageShack",
				"factoryShack@factoryWicked aggregate(totalSumUnitPrice = sum(toFloat({Unit Price})),",
				"          totalSumUnitCost = sum(toFloat({Unit Cost})),",
				"          totalSumUnitProfit = sum(toFloat({Unit Profit}))) ~> totalUnitWicked",
				"totalUnitWicked derive(JoinKeyTotal = 1) ~> addJoinColumnTotalWicked",
				"sumUnitsWicked derive(JoinKeySum = 1) ~> addJoinColumnSumWicked",
				"addJoinColumnSumWicked, addJoinColumnTotalWicked join(JoinKeySum == JoinKeyTotal,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWicked",
				"joinWicked derive(percentageUnitPrice = round(((sumUnitPrice / totalSumUnitPrice) * 100),2),",
				"          percentageUnitCost = round(((sumUnitCost / totalSumUnitCost) * 100),2),",
				"          percentageUnitProfit = round(((sumUnitProfit / totalSumUnitProfit) * 100),2)) ~> percentageDivisionWicked",
				"percentageDivisionWicked select(mapColumn(",
				"          Division,",
				"          percentageUnitPrice,",
				"          percentageUnitCost,",
				"          percentageUnitProfit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeColumnsPercentageWicked",
				"factoryShack@factoryTheOther aggregate(groupBy(Division),",
				"     sumUnitPrice = sum(toFloat({Unit Price})),",
				"          sumUnitProfit = sum(toFloat({Unit Profit})),",
				"          sumUnitCost = sum(toFloat({Unit Cost}))) ~> sumUnitsTheOther",
				"factoryShack@factoryTheOther aggregate(totalSumUnitPrice = sum(toFloat({Unit Price})),",
				"          totalSumUnitCost = sum(toFloat({Unit Cost})),",
				"          totalSumUnitProfit = sum(toFloat({Unit Profit}))) ~> totalUnitsTheOther",
				"factoryShack@factorySecret aggregate(totalSumUnitPrice = sum(toFloat({Unit Price})),",
				"          totalSumUnitCost = sum(toFloat({Unit Cost})),",
				"          totalSumUnitProfit = sum(toFloat({Unit Profit}))) ~> totalUnitsSecret",
				"factoryShack@factorySecret aggregate(groupBy(Division),",
				"     sumUnitPrice = sum(toFloat({Unit Price})),",
				"          sumUnitCost = sum(toFloat({Unit Cost})),",
				"          sumUnitProfit = sum(toFloat({Unit Profit}))) ~> sumUnitsSecrets",
				"totalUnitsTheOther derive(JoinKeyTotal = 1) ~> addJoinColumnTotalTheOther",
				"sumUnitsTheOther derive(JoinKeySum = 1) ~> addJoinColumnSumTheOther",
				"sumUnitsSecrets derive(JoinKeyTotal = 1) ~> addJoinColumnTotalSecret",
				"totalUnitsSecret derive(JoinKeySum = 1) ~> addJoinColumnSumSecret",
				"addJoinColumnSumTheOther, addJoinColumnTotalTheOther join(JoinKeySum == JoinKeyTotal,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTheOther",
				"addJoinColumnSumSecret, addJoinColumnTotalSecret join(JoinKeySum == JoinKeyTotal,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSecret",
				"joinTheOther derive(percentageUnitPrice = round(((sumUnitPrice / totalSumUnitPrice) * 100),2),",
				"          percentageUnitCost = round(((sumUnitCost / totalSumUnitCost) * 100),2),",
				"          percentageUnitProfit = round(((sumUnitProfit / totalSumUnitProfit) * 100),2)) ~> percentageDivisionTheOther",
				"joinSecret derive(percentageUnitPrice = round(((sumUnitPrice / totalSumUnitPrice) * 100),2),",
				"          percentageUnitCost = round(((sumUnitCost / totalSumUnitCost) * 100),2),",
				"          percentageUnitProfit = round(((sumUnitProfit / totalSumUnitProfit) * 100),2)) ~> percentageDivisionSecret",
				"percentageDivisionSecret select(mapColumn(",
				"          Division,",
				"          percentageUnitPrice,",
				"          percentageUnitCost,",
				"          percentageUnitProfit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeColumnsPercentageSecret",
				"percentageDivisionTheOther select(mapColumn(",
				"          Division,",
				"          percentageUnitPrice,",
				"          percentageUnitCost,",
				"          percentageUnitProfit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeColumnsPercentageTheOther",
				"factoryShack@factoryLots aggregate(totalSumUnitPrice = sum(toFloat({Unit Price})),",
				"          totalSumUnitCost = sum(toFloat({Unit Cost})),",
				"          totalSumUnitProfit = sum(toFloat({Unit Profit}))) ~> totalUnitLots",
				"totalUnitLots derive(JoinKeyTotal = 1) ~> addJoinColumnTotalLots",
				"factoryShack@factoryLots aggregate(groupBy(Division),",
				"     sumUnitPrice = sum(toFloat({Unit Price})),",
				"          sumUnitCost = sum(toFloat({Unit Cost})),",
				"          sumUnitProfit = sum(toFloat({Unit Profit}))) ~> sumUnitsLots",
				"sumUnitsLots derive(JoinKeySum = 1) ~> addJoinColumnSumLots",
				"addJoinColumnSumLots, addJoinColumnTotalLots join(JoinKeySum == JoinKeyTotal,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLots",
				"joinLots derive(percentageUnitPrice = round(((sumUnitPrice / totalSumUnitPrice) * 100),2),",
				"          percentageUnitCost = round(((sumUnitCost / totalSumUnitCost) * 100),2),",
				"          percentageUnitProfit = round(((sumUnitProfit / totalSumUnitProfit) * 100),2)) ~> percentageDivisionLots",
				"percentageDivisionLots select(mapColumn(",
				"          Division,",
				"          percentageUnitPrice,",
				"          percentageUnitCost,",
				"          percentageUnitProfit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeColumnsPercentageLots",
				"roundValues2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Factory as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     filePattern:'AVGdivision',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkAVGdivision",
				"removeColumnsPercentageLots sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Factory as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     filePattern:'productsUnitProfitLots',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkLots",
				"removeColumnsPercentageWicked sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Factory as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     filePattern:'productsUnitProfitWicked',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWicked",
				"removeColumnsPercentageShack sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Factory as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     filePattern:'productsUnitProfitShack',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkShack",
				"removeColumnsPercentageTheOther sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Factory as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     filePattern:'productsUnitProfitTheOther',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkTheOther",
				"removeColumnsPercentageSecret sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Factory as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     filePattern:'productsUnitProfitSecret',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkSecret",
				"roundValues1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Factory as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     filePattern:'AVGunits',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkAVGunits"
			]
		}
	}
}