{
	"name": "ProductsAddUnitProfitCol",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ProductsTable",
						"type": "DatasetReference"
					},
					"name": "ProductsTableSource",
					"description": "Import data from ProductsTable (products.csv)"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ProductsUnitProfit",
						"type": "DatasetReference"
					},
					"name": "productsAddUnitProfitColOUTPUT",
					"description": "Export data to ProductsUnitProfit dataset."
				}
			],
			"transformations": [
				{
					"name": "addUnitProfitColumn",
					"description": "Creating a new column that contains the comparison of 'Unit Price' and 'Unit Cost' for each row, labeled 'Unit Profit.'"
				},
				{
					"name": "roundValues",
					"description": "Updating the 'Unit Profit' column by rounding the values it contains."
				}
			],
			"scriptLines": [
				"source(output(",
				"          Division as string,",
				"          {Product Name} as string,",
				"          Factory as string,",
				"          {Product ID} as string,",
				"          {Unit Price} as string,",
				"          {Unit Cost} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProductsTableSource",
				"ProductsTableSource derive({Unit Profit} = toFloat({Unit Price})-toFloat({Unit Cost})) ~> addUnitProfitColumn",
				"addUnitProfitColumn derive({Unit Profit} = round({Unit Profit},2)) ~> roundValues",
				"roundValues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Factory as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     filePattern:(concat('products_', toString(currentDate()), '.csv')\r",
				"),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> productsAddUnitProfitColOUTPUT"
			]
		}
	}
}